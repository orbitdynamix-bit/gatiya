services:
  # postgresql
  postgres:
    image: 'postgres:16-alpine'
    container_name: gatiya-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - gatiya-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


   # Spring Boot Application
#  app:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    container_name: gatiya-backend
#    environment:
#      SPRING_PROFILES_ACTIVE: dev
#      DATABASE_URL: ${DATABASE_URL}
#      DATABASE_USERNAME: ${DATABASE_USERNAME}
#      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
#      REDIS_HOST: redis
#      REDIS_PORT: 6379
#      JWT_SECRET: ${JWT_SECRET}
#      FIREBASE_DATABASE_URL: ${FIREBASE_DATABASE_URL}
#      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
#      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
#    ports:
#      - "8080:8080"
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    networks:
#      - gatiya-network
#    volumes:
#      - ./logs:/app/logs

networks:
  gatiya-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
